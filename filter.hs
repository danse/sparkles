{-

this is how one can directly process a document tree with
pandoc. unfortunately even the identity function could cause loss of
content even for documents generated by pandoc, while an identity
passed as a filter on the abstract tree skips the double parsing
eschewing the problem

-}
import System.IO (getContents)
import Text.Pandoc
import Data.Text hiding (concat, map, concatMap)
import Data.Text.IO as IO
import Control.Applicative ((<$>))


removeQuote :: Block -> [Block]
--removeQuote (BlockQuote b) = b
removeQuote o              = [o] -- other blocks
-- also Div, OrderedList, BulletList and DefinitionList can contain blocks,
-- but i'm not handling them currently

t :: [Block] -> [Block]
t = concatMap removeQuote

removeQuotes :: Pandoc -> Pandoc
removeQuotes (Pandoc m b) = Pandoc m (t b)

interactRST :: (Pandoc -> Pandoc) -> IO ()
interactRST f = do
  cont <- IO.getContents
  tree <- runIOorExplode (readRST def cont)
  writ <- runIOorExplode (writeRST def (f tree))
  IO.putStr writ

main :: IO ()
main = interactRST removeQuotes
